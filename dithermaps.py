import numpy as np

# yapf: disable
DIFFUSION_MAPS = {
    'floyd-steinberg': (
        ( 1, 0, 7 / 16),
        (-1, 1, 3 / 16),
        ( 0, 1, 5 / 16),
        ( 1, 1, 1 / 16)
    ),
    'atkinson': (
        ( 1, 0, 1 / 8),
        ( 2, 0, 1 / 8),
        (-1, 1, 1 / 8),
        ( 0, 1, 1 / 8),
        ( 1, 1, 1 / 8),
        ( 0, 2, 1 / 8),
    ),
    'jarvis-judice-ninke': (
        ( 1, 0, 7 / 48),
        ( 2, 0, 5 / 48),
        (-2, 1, 3 / 48),
        (-1, 1, 5 / 48),
        ( 0, 1, 7 / 48),
        ( 1, 1, 5 / 48),
        ( 2, 1, 3 / 48),
        (-2, 2, 1 / 48),
        (-1, 2, 3 / 48),
        ( 0, 2, 5 / 48),
        ( 1, 2, 3 / 48),
        ( 2, 2, 1 / 48),
    ),
    'stucki': (
        ( 1, 0, 8 / 42),
        ( 2, 0, 4 / 42),
        (-2, 1, 2 / 42),
        (-1, 1, 4 / 42),
        ( 0, 1, 8 / 42),
        ( 1, 1, 4 / 42),
        ( 2, 1, 2 / 42),
        (-2, 2, 1 / 42),
        (-1, 2, 2 / 42),
        ( 0, 2, 4 / 42),
        ( 1, 2, 2 / 42),
        ( 2, 2, 1 / 42),
    ),
    'burkes': (
        ( 1, 0, 8 / 32),
        ( 2, 0, 4 / 32),
        (-2, 1, 2 / 32),
        (-1, 1, 4 / 32),
        ( 0, 1, 8 / 32),
        ( 1, 1, 4 / 32),
        ( 2, 1, 2 / 32),
    ),
    'sierra3': (
        ( 1, 0, 5 / 32),
        ( 2, 0, 3 / 32),
        (-2, 1, 2 / 32),
        (-1, 1, 4 / 32),
        ( 0, 1, 5 / 32),
        ( 1, 1, 4 / 32),
        ( 2, 1, 2 / 32),
        (-1, 2, 2 / 32),
        ( 0, 2, 3 / 32),
        ( 1, 2, 2 / 32),
    ),
    'sierra2': (
        ( 1, 0, 4 / 16),
        ( 2, 0, 3 / 16),
        (-2, 1, 1 / 16),
        (-1, 1, 2 / 16),
        ( 0, 1, 3 / 16),
        ( 1, 1, 2 / 16),
        ( 2, 1, 1 / 16),
    ),
    'sierra-2-4a': (
        ( 1, 0, 2 / 4),
        (-1, 1, 1 / 4),
        ( 0, 1, 1 / 4),
    ),
    'stevenson-arce': (
        ( 2, 0, 32 / 200),
        (-3, 1, 12 / 200),
        (-1, 1, 26 / 200),
        ( 1, 1, 30 / 200),
        ( 3, 1, 30 / 200),
        (-2, 2, 12 / 200),
        ( 0, 2, 26 / 200),
        ( 2, 2, 12 / 200),
        (-3, 3, 5  / 200),
        (-1, 3, 12 / 200),
        ( 1, 3, 12 / 200),
        ( 3, 3, 5  / 200)
    )
}

BAYER_PRECALC = {
    'halftone': np.array((
        (1, 2),
        (2, 1)
    )) * (1/3),
    '2': np.array((
        (0, 2),
        (3, 1)
    )) * (1/4),
    '3': np.array((
        (0, 7, 3),
        (6, 5, 2),
        (4, 1, 8)
    )) * (1/9),
    '4': np.array((
        (0,  8,  2,  10),
        (12, 4,  14, 6 ),
        (3,  11, 1,  9 ),
        (15, 7,  13, 5 )
    )) * (1/16),
    '8': np.array((
        (0,  48, 12, 60, 3,  51, 15, 63),
        (32, 16, 44, 28, 35, 19, 47, 31),
        (8,  56, 4,  52, 11, 59, 7,  55),
        (40, 24, 36, 20, 43, 27, 39, 23),
        (2,  50, 14, 62, 1,  49, 13, 61),
        (34, 18, 46, 30, 33, 17, 45, 29),
        (10, 58, 6,  54, 9,  57, 5,  53),
        (42, 26, 38, 22, 41, 25, 37, 21)
    )) * (1/64)
}
# yapf: enable


def get_bayer_matrix(size):
    # Use precalculated matrix if we have it
    if str(size) in BAYER_PRECALC.keys():
        return BAYER_PRECALC[str(size)]
    else:
        # This area is so that we can add a Bayer matrix generator later,
        # but it isn't currently implemented
        raise NotImplementedError
